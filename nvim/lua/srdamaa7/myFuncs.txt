gcd
ll gcd(ll a,ll b){
  while(b){
    a%=b;
    swap(a,b);
  }
  return a;
}

ll lcm(ll a,ll b){
  return a/gcd(a,b)*b;
}
$$$
pow
ll pow(ll a, ll b, ll m){
  a%=m;
  ll res=1;
  while(b){
    if(b&1)res=res*a%m;
    b/=2;
    a=a*a%m;
  }
  return res;
}
ll inverse_mod(ll a, ll m){
  return pow(a,m-2,m);
}
$$$
seg
ll seg[4*N];
ll defaultValue=0;

ll merge(ll a,ll b){
  return a+b;
}

void build(vector<ll>&values,int l=1,int r=n,int p=1){
  if(l==r){
    seg[p]=values[i];
    return;
  }
  int mid=l+r>>1;
  build(l,mid,2*p);
  build(mid+1,r,2*p+1);
  seg[p]=merge(seg[2*p],seg[2*p+1]);
}

ll get(int st,int en,int l=1,int r=n,int p=1){
  if(l>en||r<st)return defaultValue;
  if(st<=l&&r<=en)return seg[p];
  int mid=l+r>>1;
  return merge(get(st,en,l,mid,2*p),get(st,en,mid+1,r,2*p+1));
}

void update(int pos,ll value,int l=1,int r=n,int p=1){
  if(l==r){
    seg[p]=value;
    return;
  }
  int mid=l+r>>1;
  if(pos<=mid){
    update(pos,value,l,mid,2*p);
  }else{
    update(pos,value,mid+1,r,2*p+1);
  }
  seg[p]=merge(seg[2*p],seg[2*p+1]);
}
$$$
Com
ll fact[N];
void factt(ll m){
  fact[0]=1;
  for(ll i=1;i<N;i++){
    fact[i]=fact[i-1]*i%m;
  }
}
ll Com(ll n, ll r, ll m){
  if(n<r)return 0;
  return fact[n]*inverse_mod(fact[r]*fact[n-r]%m,m)%m;
}
$$$
Man
struct Manacher{
  string s;
  vector<int> rad;
  int n;
  void build(string t) {
    s = t;
    n = 2*s.size();
    rad.clear();
    rad.resize(n, 0);
    for (int i = 0, j = 0, k; i < n; i += k, j = max(j - k, 0)) {
      for (; i >= j && i + j + 1 < n && s[(i - j) / 2] == s[(i + j + 1) / 2]; ++j);

      rad[i] = j;

      for (k = 1; i >= k && rad[i] >= k && rad[i - k] != rad[i] - k; ++k)
        rad[i + k] = min(rad[i - k], rad[i] - k);
    }
  }
  bool is_palindrome(int l, int r) {
    return l >= 0 && r < s.size() &&  rad[l+r] >= r - l + 1;
  }
  // Longest odd palindrome with center at ith position
  int longestOdd(int i) {
    return rad[i*2];
  }
  // Longest even palindrome with center between ith and (i+1)th position
  int longestEven(int i) {
    return rad[2*i+1];
  }

};
$$$
